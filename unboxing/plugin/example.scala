package example

import sys.process._
import scala.util.Try
import scala.util.matching.Regex

// process the output generated by -verbose

object Test {
  val phases = Seq("parser", "namer", "packageobjects", "typer", "superaccessors",
    "pickler", "refchecks", "liftcode",
    "uncurry", "tailcalls", "specialize", "explicitouter", "erasure",
    "lazyvals", "lambdalift", "constructors", "flatten", "mixin",
    "cleanup", "icode", "inliner", "closelim", "dce",
    "jvm")

  def main(args: Array[String]) {
    val fname = if(args.isEmpty) "verbose.log" else args(0)
    val pattern = """(\.*)""".r

    val results =
      phases flatMap { p =>
        Try(s"cat $fname" #| s"grep $p" #| """grep ms\]""" !!).toOption map {
          p -> _
        }
      } map {
        case (p, res) =>
          val counts  =
            res.split("\n").toSeq flatMap { l =>
              Try(l.split(" ").last.split("ms").head.toInt).toOption
            }
          val sum = counts.foldLeft(0) { _ + _ }
          p -> sum
      }

    val sorted = results.sortBy { case (_, sum) => sum }.reverse
    val total = results.map { case (_, sum) => sum }.foldLeft(0) { _ + _ }
    sorted foreach { case (p, sum) =>
      println("%s \t %s \t (%.2f%%)".format(p, sum, sum.toDouble * 100 / total ))
    }
  }
}



